<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Martin Betz</title>
    <link href="https://martinbetz.eu" />
    <link type="application/atom+xml" rel="self" href="https://martinbetz.eu/rss/feed.atom" />
    <updated>2020-06-08T19:54:06+00:00</updated>
    <id>https://martinbetz.eu/rss/feed.atom</id>
    <author>
        <name>Martin Betz</name>
    </author>
                <entry>
    <id>https://martinbetz.eu/articles/lessons-learnt-phpunit-course</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/lessons-learnt-phpunit-course" />
    <title>Lessons Learnt: PHPUnit for Beginners</title>
    <published>2020-06-08T00:00:00+00:00</published>
    <updated>2020-06-08T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">I took the course PHPUnit for Beginners by Laravel Daily. It is suitable for total testing beginners and walks you through a simple CRUD application. 
Here are my takeaways in the format of question and answer. They are sorted by occurence in the course......</summary>
    <content type="html"><![CDATA[
        <p>I took the course <a href="https://laraveldaily.teachable.com/p/laravel-phpunit-testing-for-beginners">PHPUnit for Beginners by Laravel Daily</a>. It is suitable for total testing beginners and walks you through a simple CRUD application. </p>
<p>Here are my takeaways in the format of question and answer. They are sorted by occurence in the course but you can use whatever you need for your application and testing – not everything is related to testing:</p>
<h2>Why choose <code>@forelse … @empty … @endforelse</code> for loops?</h2>
<p>It covers the case where there is no data</p>
<pre><code class="language-php">@forelse ($users as $user)
     &lt;li&gt;{{ $user-&gt;name }}&lt;/li&gt;
@empty
    &lt;p&gt;No users&lt;/p&gt;
@endforelse</code></pre>
<h2>How to create content with custom values with Eloquent</h2>
<pre><code class="language-php">$product = Product:create([
  'name' =&gt; 'Product 1',
  'price' =&gt; 99.99
]);

// in your test
$response-&gt;assertSee($product-&gt;name);</code></pre>
<h2>How to setup test database?</h2>
<ul>
<li><code>phpunit.xml</code> overwrites <code>.env.testing</code></li>
<li>Edit <code>DB_CONNECTION</code> for <code>MySQL/sqlite</code></li>
<li>Change  value of <code>DB_DATABASE</code> into <code>value=":memory:"</code> to get fast in memory store</li>
</ul>
<h2>What does <code>RefreshDatabase</code> trait do?</h2>
<ul>
<li>It Runs migrations</li>
<li>Creates a fresh database</li>
<li>Usage
<ul>
<li><code>use Illuminate\Foundation\Testing\RefreshDatabase;</code> above class</li>
<li><code>use RefreshDatabase;</code> in class, not single test</li>
</ul></li>
</ul>
<h2>When should you use a MySQL test database?</h2>
<ul>
<li>When you use raw MySQL statements for the following features:
<ul>
<li>Date formatting</li>
<li>String functions</li>
<li>Date differences</li>
<li>Geospatial features</li>
</ul></li>
</ul>
<h2>How to set up a MySQL test database in <code>phpunit.xml</code>?</h2>
<ul>
<li><code>&lt;server name="DB_CONNECTION" value="MySQL"/&gt;</code></li>
<li><code>&lt;server name="DB_DATABASE" value="name_of_db"/&gt;</code></li>
</ul>
<h2>Why to test data and not visuals (assertSee)?</h2>
<ul>
<li>To avoid false positives because of incomplete results</li>
<li>Example
<ul>
<li>Blade: show product name <code>{{ $product-&gt;name }}</code></li>
<li>Data: <code>['name' =&gt; 'Product 1000]</code></li>
<li>Visual test: <code>$response-&gt;assertSee('Product 1')</code> would turn green and create a false positive</li>
</ul></li>
</ul>
<h2>How to get view data of e.g. $products to test?</h2>
<pre><code class="language-php">$view = $response-&gt;viewData('products') // was passed to view in controller
$this-&gt;assertEquals($product-&gt;name, $view-&gt;first()-&gt;name);</code></pre>
<h2>What do unit tests capture?</h2>
<ul>
<li>Internal logic</li>
<li>No Endpoint</li>
<li>Data processing</li>
</ul>
<h2>How to create a Laravel service to translate currency</h2>
<ul>
<li>Create service in <code>app\services</code> -&gt; <code>CurrencyService.php</code></li>
<li>Import using <code>use App\Services\CurrencyService</code></li>
<li>Call <code>new CurrencyService()-&gt;convert();</code></li>
<li>No changes in database needed</li>
</ul>
<h2>How to create temporary database/accessor field (e.g. dynamic price in another currency)?</h2>
<ul>
<li>This is also called accessor</li>
<li>On model <code>Product.php</code></li>
</ul>
<pre><code class="language-php">public function getPriceEurAttribute() {
    return $this-&gt;price*0.8;
}</code></pre>
<h2>How to create an unit test?</h2>
<ul>
<li><code>art make:test NAME --unit</code></li>
</ul>
<h2>How to paginate in controller and view?</h2>
<ul>
<li>(In Controller): <code>$products = Product::paginate(10);</code></li>
<li>In View: <code>{{ $products-&gt;links() }}</code></li>
</ul>
<h2>How to call factories?</h2>
<ul>
<li><code>factory(Product::class, 10)-&gt;create();</code></li>
</ul>
<h2>How to echo variable result into log?</h2>
<ul>
<li>Call <code>info($var)</code> in your code</li>
</ul>
<h2>How to test if login works?</h2>
<ul>
<li>Create user</li>
<li>Post login data and set response</li>
</ul>
<pre><code class="language-php">$response = $this-&gt;post('login', [
  'email' =&gt; 'EMAIL',
  'password' =&gt; 'PW'
]);
// assert where you expect to be redirected to, e.g. home
$response-&gt;assertRedirect('/home');</code></pre>
<h2>How to quickly log in for tests?</h2>
<ul>
<li><code>$this-&gt;actingAs($user)-&gt;get('/')</code></li>
</ul>
<h2>How to protect a route via auth?</h2>
<ul>
<li><code>Route::get('/')-&gt;middleware('auth')</code></li>
</ul>
<h2>Easiest way to add admin?</h2>
<ul>
<li>Add field to user model: <code>is_admin</code></li>
<li>Add to fillable in model</li>
<li>Create middleware <code>app\Http\Middleware\IsAdmin</code> (see following snippet)</li>
<li>Add middleware to <code>App\Kernel</code></li>
<li>Add middleware to your route <code>Route::middleware('auth', 'is_admin')</code></li>
</ul>
<pre><code class="language-php">public function handle($request, Closure $next) 
{
  if (! auth()-&gt;user()-&gt;is_admin) 
  {
    abort(403);
  }
  return $next($request);
}</code></pre>
<h2>Which visual assertions are usual?</h2>
<ul>
<li><code>$response-&gt;assertSee()</code></li>
<li><code>$response-&gt;assertDontSee()</code></li>
</ul>
<h2>How to create simple factory states?</h2>
<ul>
<li>Example: <code>is_admin</code>, yes/no</li>
<li>Create private function with factory and optional parameter in it</li>
</ul>
<pre><code class="language-php">private function create_user(is_admin = 0)
{
  $this-&gt;user = factory(User::class)-&gt;create([
    'is_admin' =&gt; $is_admin,
  ]);
}</code></pre>
<h3>How to store everything you get via form?</h3>
<pre><code class="language-php">// Controller

public function store(Request $request)
{
    Product::create($request-&gt;all());
    return redirect()-&gt;route('home');
}</code></pre>
<h2>How to test a POST request with parameter <code>name = 'Test 1'</code>?</h2>
<ul>
<li><code>$this-&gt;post('products', ['name' =&gt; 'Test 1', 'price' =&gt; 99.99]);</code></li>
</ul>
<h2>How to assert that something is in the database? (db side)</h2>
<ul>
<li><code>$this-&gt;assertDatabaseHas('products', ['name' =&gt; 'Test 1', 'price' =&gt; 99.99]);</code></li>
</ul>
<h2>How to test whether saved data gets returned?</h2>
<ul>
<li><code>$product = Product::orderBy('id', 'desc')-&gt;first();</code></li>
<li><code>$this-&gt;assertEquals('String', $product-&gt;name);</code></li>
<li><code>$this-&gt;assertEquals('price', $product-&gt;price);</code></li>
</ul>
<h2>How to check whether data for edit is available in view?</h2>
<ul>
<li><code>$product = Product::first();</code></li>
<li><code>$response-&gt;assertSee('value="' . $product-&gt;price . '"');</code></li>
</ul>
<h2>How to update all data from a request?</h2>
<pre><code class="language-php">public function update(Product $product, UpdateProductRequest $request)
{
  $product-&gt;update($request-&gt;all());
  return redirect()-&gt;route('products.index');
}</code></pre>
<h2>Where and how to create a form request?</h2>
<ul>
<li><code>app/Http/Requests/UpdateProductRequest.php</code></li>
</ul>
<pre><code class="language-php">public rules() {
  return [
    'name' =&gt; 'required',
    'price' =&gt; 'required',
  ];
}</code></pre>
<h2>How to test an update request?</h2>
<p><code>$response = $this-&gt;put('/products/' . $product-&gt;id, ['name' =&gt; 'Test']);</code></p>
<h2>How to test for session error on 'name'?</h2>
<p><code>$response-&gt;assertSessionHasErrors(['name']);</code></p>
<h2>How to update as json API call?</h2>
<pre><code class="language-php">$response = $this-&gt;actingAs($this-&gt;user)
  -&gt;put('/products/' . $product-&gt;id,
  [
    'name' =&gt; 'Test',
    'price' =&gt; 99.99,
  ],
  [
   'Accept' =&gt; 'Application/json', 
  ]);</code></pre>
<h2>How to create a delete item view?</h2>
<pre><code class="language-php">&lt;form action={{ route('products.destroy' . $product-&gt;id) }} method="POST" onsubmit="confirm('Sure?')"&gt;
&lt;input type="hidden" name="_method" value="DELETE"&gt;
&lt;input type="hidden" name="_token" value="{{ csrf_token() }}"&gt;</code></pre>
<h2>How to delete item in controller?</h2>
<pre><code class="language-php">public function destroy(Product $product) {
  $product-&gt;delete();
  return redirect()-&gt;route('products.index');
}</code></pre>
<h2>How to assert that data gets deleted?</h2>
<ol>
<li>Create product with factory</li>
<li><code>$this-&gt;assertEquals(1, Product::all())</code></li>
<li><code>$response = $this-&gt;actingAs($this-&gt;user)-&gt;delete('products/' . $product-&gt;id);</code> (Route missing?)</li>
<li><code>$response-&gt;assertStatus(302)</code></li>
<li><code>$this-&gt;assertEquals(0, Product::count());</code></li>
</ol>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/laravel-pin-protected-url</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/laravel-pin-protected-url" />
    <title>How to protect URLs with a PIN code in Laravel</title>
    <published>2020-05-26T00:00:00+00:00</published>
    <updated>2020-05-26T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">
Please use with caution! The solution presented here should not be used for sites where high security needs to be guaranteed. I will update the post accordingly, but refer to this Reddit post for reference.

Here is the user story for this post: As a......</summary>
    <content type="html"><![CDATA[
        <div class="p-2 bg-red-200 border-2 border-solid border-red-800">
Please use with caution! The solution presented here should not be used for sites where high security needs to be guaranteed. I will update the post accordingly, but refer to <a class="text-red-900" href="https://www.reddit.com/r/laravel/comments/gr18nj/how_to_protect_your_route_with_a_pin_code/" target="_blank">this Reddit post</a> for reference.
</div>
<p>Here is the user story for this post: As a website owner I only want to allow access to my website for visitors who enter the correct PIN.</p>
<h2>How the minimum version will work</h2>
<p>When you enter the page for the first time, you will just see an input to enter a PIN. When you enter the wrong PIN, it fails silently and just reloads the page. If you enter the right PIN, it will save a cookie <code>access</code> and shows you the welcome page. If you try more than 3 times within a minute, you get a message <code>Too Many Requests</code>.</p>
<p>And here is how it will look in the browser:</p>
<img class="border-2 rounded border-grey shadow-inline" src="/assets/img/articles/pin-access-demo.gif" alt="">
<h2>The tests</h2>
<p>I will first create the sad path where I cannot access the welcome page as I did not enter the right PIN. Then I will simulate that I previously entered the right PIN and have a cookie that lets me pass. Then I will test that actual entering of the PIN and check whether I get a cookie. Lastly I check that I get banned if I enter three wrong PINs in a very short time:</p>
<pre><code class="language-php">&lt;?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Support\Facades\Config;
use Tests\TestCase;

class WelcomeTest extends TestCase
{

    /** @test */
    public function can_not_access_welcome_page_without_pin() {
        $response = $this-&gt;get(route('root'));
        $response-&gt;assertStatus(302);
        $response-&gt;assertRedirect(route('pin.create'));
    }

    /** @test */
    public function can_access_welcome_page_with_pin_cookie() {
        $response = $this-&gt;withCookie('access', 'pass')-&gt;get(route('root'));
        $response-&gt;assertStatus(200);
    }

    /** @test */
    public function can_enter_pin_and_access_root_page() {
        Config::set('settings.PIN', '5678');
        $response = $this-&gt;post(route('pin.store', [
            'pin' =&gt; '5678',
        ]));
        $response-&gt;assertCookie('access', 'pass');
    }

    /** @test */
    public function blocks_for_one_minute_after_three_attemps() {
        $this-&gt;post(route('pin.store', [
            'pin' =&gt; '1',
        ]));
        $this-&gt;post(route('pin.store', [
            'pin' =&gt; '2',
        ]));
        $this-&gt;post(route('pin.store', [
            'pin' =&gt; '3',
        ]));
        $response = $this-&gt;post(route('pin.store', [
            'pin' =&gt; '3',
        ]));
        $response-&gt;assertStatus(429);
    }
}</code></pre>
<h2>The code</h2>
<p>I wrote the tests first and added the code one error after another. You may replicate by just running the tests above and go through the errors yourself.</p>
<p>Here's the files you need with a short explanation what they do:</p>
<ul>
<li><code>routes/web.php</code>: for adding the routes, adding the middleware to restrict access and limit the trials</li>
<li><code>app/Http/Middleware/CheckPin.php</code>: this is the middleware that checks whether you have a cookie that allows you to enter the welcome page</li>
<li><code>app/Http/Kernel.php</code>: this is were you register the custom middleware</li>
<li><code>app/Http/Controllers/PinController.php</code>: this is were you check the PIN entered and create the cookie on success</li>
<li><code>resources/views/create.blade.php</code>: the view for entering the PIN</li>
<li><code>resources/views/welcome.blade.php</code>: the view with the protected content</li>
<li><code>config/settings.php</code>: you define the PIN setting here to get the value from the <code>.env</code> file and provide a fallback value</li>
<li>`</li>
</ul>
<p>And here are the important sections of the files. I marked omissions with <code>(…)</code>. You can find the full source code on <a href="https://github.com/minthemiddle/pin-tutorial">https://github.com/minthemiddle/pin-tutorial</a>:</p>
<pre><code class="language-php">// routes/web.php
&lt;?php

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
})-&gt;name('root')-&gt;middleware('pin');

Route::get('pin/create', function () {
    return view('create');
})-&gt;name('pin.create');

Route::post('pin/store', 'PinController@store')-&gt;name('pin.store')-&gt;middleware('throttle:3,1');
</code></pre>
<pre><code class="language-php">// app/Http/Middleware/CheckPin.php
&lt;?php

namespace App\Http\Middleware;

use Closure;

class CheckPin
{
    public function handle($request, Closure $next)
    {
        if ($request-&gt;cookie('access') === 'pass') {
            return $next($request);
        }

        return redirect(route('pin.create'));
    }
}
</code></pre>
<pre><code class="language-php">// app/Http/Kernel.php
&lt;?php

namespace App\Http;

use App\Http\Middleware\CheckPin;
use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    (…)

    protected $routeMiddleware = [
        (…)
        \App\Http\Middleware\CheckPin::class,
    ];
}
</code></pre>
<pre><code class="language-php">// app/Http/Controllers/PinController.php
&lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Config;

class PinController extends Controller
{
    public function store(Request $request)
    {
        if ($request-&gt;pin === Config::get('settings.PIN')) {
            return redirect(route('root'))-&gt;withCookie('access', 'pass', 60);
        }

        return redirect(route('pin.create'));
    }
}
</code></pre>
<pre><code class="language-html">// resources/views/create.blade.php
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
    &lt;link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet"&gt;
    &lt;link rel="stylesheet" href="https://unpkg.com/@tailwindcss/custom-forms@0.2.1/dist/custom-forms.min.css"&gt;
    &lt;title&gt;Enter PIN&lt;/title&gt;
&lt;/head&gt;
&lt;body class="p-8 mx-auto"&gt;
&lt;form action="{{ route('pin.store') }}" method="POST"&gt;
    @csrf
    &lt;input type="number" required name="pin" class="form-input text-xl"&gt;
    &lt;button type="submit" class="form-input p-2 text-xl"&gt;Save&lt;/button&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-php">// resources/views/welcome.blade.php
// I just used the standard welcome page that ships with Laravel

```php
// config/settings.php
&lt;?php

return [
    'PIN' =&gt; env('PIN', '1234'),
];
</code></pre>
<pre><code class="language-yaml"># .env
(…)
PIN=5678
(…)</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/premium-laravel</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/premium-laravel" />
    <title>Premium Laravel courses and books</title>
    <published>2020-04-27T00:00:00+00:00</published>
    <updated>2020-04-27T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">There are many premium paid video courses (📺) and books (📘) for Laravel.
I also list content that is not released yet (🚧).
The list is sorted alphabetically:

📺 Build A Chatbot
📘 Build an API with Laravel 
📺 Confident Laravel
📺, 🚧......</summary>
    <content type="html"><![CDATA[
        <p>There are many premium paid video courses (📺) and books (📘) for Laravel.<br />
I also list content that is not released yet (🚧).<br />
The list is sorted alphabetically:</p>
<ul>
<li>📺 <a href="https://course.buildachatbot.io/">Build A Chatbot</a></li>
<li>📘 <a href="https://buildanapi.com/">Build an API with Laravel</a> </li>
<li>📺 <a href="https://confidentlaravel.com/">Confident Laravel</a></li>
<li>📺, 🚧 <a href="https://eloquent-course.reinink.ca/">Eloquent Performance Patterns</a></li>
<li>📺, 🚧 <a href="https://indepthlaravel.com/">In Depth Laravel</a></li>
<li>📺 <a href="https://laravelcoreadventures.com/">Laravel Core Adventures</a></li>
<li>📘, 🚧 <a href="https://laravelsecrets.com/">Laravel Secrets</a></li>
<li>📘 <a href="https://laravelupandrunning.com/">Laravel Up &amp; Running</a></li>
<li>📺 <a href="https://mailcoach.app/videos">The Mailcoach
video course</a></li>
<li>📺, 🚧 <a href="https://multitenancy.dev/">Multi Tenancy with Laravel</a></li>
<li>📺 <a href="https://laraveldaily.teachable.com/">Online Courses by Laravel Daily</a></li>
<li>📺 <a href="https://phppackagedevelopment.com/">PHP Package Development</a></li>
<li>📘 <a href="https://adamwathan.me/refactoring-to-collections/">Refactoring to Collections</a></li>
<li>📺 <a href="https://serverlesslaravelcourse.com/">Serverless Laravel</a></li>
<li>📺 <a href="https://course.testdrivenlaravel.com/">Test Driven Laravel</a></li>
</ul>
<p>If you know more resources, please email me 👇.</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/email-testing-laravel</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/email-testing-laravel" />
    <title>Testing mails in Laravel</title>
    <published>2020-04-25T00:00:00+00:00</published>
    <updated>2020-04-25T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">
Imagine a simple social network where users can send emails to other users. We will use Laravel and test driven development to create an app that does exactly this.
An user visits the profile of another user and when he clicks on &amp;quot;Message&amp;quot; he......</summary>
    <content type="html"><![CDATA[
        <h2>The case: Test that users can send mails to other users</h2>
<p>Imagine a simple social network where users can send emails to other users. We will use Laravel and test driven development to create an app that does exactly this.</p>
<p>An user visits the profile of another user and when he clicks on &quot;Message&quot; he can send a customized email to the other user via the system. He can even give a custom subject.</p>
<p>I know that for such a simple use case we could just use <code>&lt;a href="mailto:name@domain.com"&gt;&lt;/a&gt;</code> but I want to show you how to use and test email in Laravel.</p>
<h2>The setup</h2>
<p>You just need a fresh Laravel app. At the time of writing this article this was v7.8.1, but anything after v5.6 should be 80% matching (please report issues). For a minimal setup, remove all lines starting with <code>DB_</code> in your <code>.env</code>, add <code>DB_CONNECTION=sqlite</code>, create a file called <code>database.sqlite</code> in  the <code>/database</code> folder and run <code>php artisan migrate</code>.</p>
<h2>The test</h2>
<p>We will first right an automated test. This will fail and we will add code step by step to fix the problems to finally get a test that gives us confidence that the code works as intended.</p>
<p>Let's create the test: <code>php artisan make:test ContactUserTest</code>. I will show you how my initial test looks like, but please be aware that I spent around 10 minute into thinking &quot;How should this work?&quot;. Writing the test is when you define how you wish your app should work. We are first testing the expected action (<code>it_does_send_a_mail_from_one_user_to_another</code>). This is called the happy path. We will later check that unexpected behavior does not happen – the sad path.</p>
<p>I'll explain the details after the code, but I left some problems in there so you can see how test driven development (TDD) works. Write a failing test and fix one problem after the other until you get a passing test.</p>
<pre><code class="language-php">&lt;?php

namespace Tests\Feature;

use App\User;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;

class ContactUserTest extends TestCase
{
    /** @test */
    public function it_does_send_a_mail_from_one_user_to_another()
    {
        $user_from = factory(User::class)-&gt;create();
        $user_to = factory(User::class)-&gt;create();

        Mail::fake();

        $response = $this-&gt;post(route('contactUserMail'), [
            'user_to' =&gt; $user_to,
            'subject' =&gt; 'My subject',
            'body' =&gt; 'My body',
        ]);

        $response-&gt;assertSuccessful();

        Mail::assertSent(ContactUserMail::class);
    }
}</code></pre>
<ul>
<li>I first create two users, the sender and the receiver (<code>$user_to</code>)</li>
<li>We will use the logged in user as the sender, so we don't need to send this info with the request</li>
<li><code>Mail::fake()</code> will swap the actual <code>Mail</code> class with a test library. No real mails will be sent and we can make assertions on what should happen</li>
<li>I decided that sending a mail should be a <code>POST</code> request from a form and have <code>user_to</code>, <code>subject</code> and <code>body</code> arguments. I will get the <code>user_from</code> automatically from the currently logged in user to prevent that you can send in someone else's name</li>
<li><code>$response-&gt;assertSuccessful()</code> will check whether the <code>POST</code> request was successful</li>
<li>Finally, I check whether the Mail class <code>ContactUserMail</code> was sent</li>
</ul>
<p>As expected, there are a couple of errors, but let <code>phpunit</code> tell us what's wrong…</p>
<p>Just run <code>phpunit</code> within your project - with Laravel 7+ you can also use <code>php artisan test</code>.</p>
<h2>Problem 01: No database being used</h2>
<p>The error: <code>SQLSTATE[HY000]: General error: 1 no such table: users</code></p>
<p>Our test is not using the database yet, let's add the <code>RefreshDatabase</code> trait to solve this.</p>
<p>Note: I will show git diffs for solving the problems. This diff compares before <code>a/</code> and after <code>b/</code>. A <code>+</code> means that something was added, a <code>-</code> shows deleted lines.</p>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index 89de017..a611b89 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -3,11 +3,14 @@
 namespace Tests\Feature;

 use App\User;
+use Illuminate\Foundation\Testing\RefreshDatabase;
 use Illuminate\Support\Facades\Mail;
 use Tests\TestCase;

 class ContactUserTest extends TestCase
 {
+    use RefreshDatabase;
+
     /** @test */
     public function it_does_send_a_mail_from_one_user_to_another()
     {</code></pre>
<h2>Problem 02: Route not defined</h2>
<p>The error: <code>Symfony\Component\Routing\Exception\RouteNotFoundException: Route [contactUserMail] not defined.</code></p>
<p>Well, we called a route that does not exist yet. Let's create it:</p>
<pre><code class="language-diff">diff --git a/routes/web.php b/routes/web.php
index b130397..4ecc7b7 100644
--- a/routes/web.php
+++ b/routes/web.php
@@ -16,3 +16,7 @@ use Illuminate\Support\Facades\Route;
 Route::get('/', function () {
     return view('welcome');
 });
+
+Route::post('contactUserMail', function() {
+    return true;
+})-&gt;name('contactUserMail');</code></pre>
<p>This route may seem stupid, because I just return <code>true</code>, but for now it is just important to solve the error that <code>phpunit</code> showed.</p>
<h2>Problem 03: Mail was not sent</h2>
<p>The error: <code>The expected [Tests\Feature\ContactUserMail] mailable was not sent.</code></p>
<p>Ok, let's create the email first and leave as is:</p>
<p><code>php art make:mail ContactUserMail -m emails.contactUserMail</code> </p>
<p>This will create the mail class and a markdown template.</p>
<p>We have to update the route to actually send the mail with <code>Mail::to('test@test.com')-&gt;send(new ContactUserMail);</code>. Again, the goal is not to be right, but to get the test passing.</p>
<pre><code class="language-diff">diff --git a/routes/web.php b/routes/web.php
index 4ecc7b7..9ed75ee 100644
--- a/routes/web.php
+++ b/routes/web.php
@@ -1,5 +1,7 @@
 &lt;?php

+use App\Mail\ContactUserMail;
+use Illuminate\Support\Facades\Mail;
 use Illuminate\Support\Facades\Route;

 /*
@@ -18,5 +20,6 @@ Route::get('/', function () {
 });

 Route::post('contactUserMail', function() {
+    Mail::to('test@test.com')-&gt;send(new ContactUserMail);
     return true;
 })-&gt;name('contactUserMail');</code></pre>
<p>Lastly, we need to import the Mail class to the test:</p>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index a611b89..4d208a6 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -2,6 +2,7 @@

 namespace Tests\Feature;

+use App\Mail\ContactUserMail;
 use App\User;
 use Illuminate\Foundation\Testing\RefreshDatabase;
 use Illuminate\Support\Facades\Mail;</code></pre>
<p>Run <code>phpunit</code> again and… <code>✔ It does send a mail from one user to another</code>.</p>
<p>Congratulations, our test is passing, we are sending the mail as expected.</p>
<p>But wait, we did not check that <code>user_from</code> and <code>user_to</code> are right. Our test is incomplete.</p>
<p>This is also a common case, so no worries. Just add more assertions to your test:</p>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index fb6532d..64df550 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -28,6 +28,10 @@ class ContactUserTest extends TestCase

         $response-&gt;assertSuccessful();

-        Mail::assertSent(ContactUserMail::class);
+        Mail::assertSent(ContactUserMail::class, function($mail) use ($user_from, $user_to) {
+            $mail-&gt;build();
+            $this-&gt;assertEquals($user_from-&gt;email, $mail-&gt;from[0]['address']);
+            $this-&gt;assertTrue($mail-&gt;hasTo($user_to-&gt;email));
+            return true;
+        });
     }
 }</code></pre>
<p>Run <code>phpunit</code> again.</p>
<h2>Problem 04: From is not right</h2>
<p>Error: <code>ErrorException: Trying to get property 'address' of non-object</code> </p>
<p>Ok, we did not set the sender yet. Let's do this.</p>
<pre><code class="language-diff">diff --git a/app/Mail/ContactUserMail.php b/app/Mail/ContactUserMail.php
index 017b66c..0577a18 100644
--- a/app/Mail/ContactUserMail.php
+++ b/app/Mail/ContactUserMail.php
@@ -28,6 +28,6 @@ class ContactUserMail extends Mailable
      */
     public function build()
     {
-        return $this-&gt;markdown('emails.contactUserMail');
+        return $this-&gt;from('sender@test.com')-&gt;markdown('emails.contactUserMail');
     }
 }</code></pre>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index d47f85f..947757c 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -15,7 +15,9 @@ class ContactUserTest extends TestCase
     /** @test */
     public function it_does_send_a_mail_from_one_user_to_another()
     {
-        $user_from = factory(User::class)-&gt;create();
+        $user_from = factory(User::class)-&gt;create([
+            'email' =&gt; 'sender@test.com',
+        ]);
         $user_to = factory(User::class)-&gt;create();
     }
 }</code></pre>
<h2>Problem 05: From is not right</h2>
<p>Error: <code>Failed asserting that false is true</code>(<code>ContactUserTest.php:36</code>)</p>
<p>So, now the <code>to</code> is not correct. Of course, we did not specify the email in the factory, so we have differing emails. Let's fix this!</p>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index 9f2b79d..3f72373 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -18,7 +18,9 @@ class ContactUserTest extends TestCase
         $user_from = factory(User::class)-&gt;create([
             'email' =&gt; 'sender@test.com',
         ]);
-        $user_to = factory(User::class)-&gt;create();
+        $user_to = factory(User::class)-&gt;create([
+            'email' =&gt; 'test@test.com',
+        ]);

         Mail::fake();
</code></pre>
<p>Run <code>phpunit</code> again and boom, <code>from</code> and <code>to</code> work as expected!</p>
<p>But <code>subject</code> is still missing. Add an assertion to the test:</p>
<pre><code class="language-diff">diff --git a/tests/Feature/ContactUserTest.php b/tests/Feature/ContactUserTest.php
index 3f72373..9840e1b 100644
--- a/tests/Feature/ContactUserTest.php
+++ b/tests/Feature/ContactUserTest.php
@@ -36,6 +36,7 @@ class ContactUserTest extends TestCase
             $mail-&gt;build();
             $this-&gt;assertEquals($user_from-&gt;email, $mail-&gt;from[0]['address']);
             $this-&gt;assertTrue($mail-&gt;hasTo($user_to-&gt;email));
+            $this-&gt;assertEquals('My subject', $mail-&gt;subject);
             return true;
         });
     }</code></pre>
<h2>Problem 05: Subject not working</h2>
<p>Error: <code>TypeError: Argument 2 passed to PHPUnit\Framework\Assert::assertTrue() must be of the type string, null given</code> (<code>ContactUserTest.php:39</code>)</p>
<p>This simply means that <code>$mail-&gt;subject</code> is empty.</p>
<p>Let's solve this:</p>
<pre><code class="language-diff">diff --git a/app/Mail/ContactUserMail.php b/app/Mail/ContactUserMail.php
index 0577a18..1e7258f 100644
--- a/app/Mail/ContactUserMail.php
+++ b/app/Mail/ContactUserMail.php
@@ -28,6 +28,6 @@ class ContactUserMail extends Mailable
      */
     public function build()
     {
-        return $this-&gt;from('sender@test.com')-&gt;markdown('emails.contactUserMail');
+        return $this-&gt;from('sender@test.com')-&gt;subject('My subject')-&gt;markdown('emails.contactUserMail');
     }
 }</code></pre>
<p>Run <code>phpunit</code> again and yay, the test is passing. You can be confident now that an email is sent with the expected <code>from</code>, <code>to</code> and <code>subject</code>.</p>
<p>Let's call it a day for now and tap yourself on the shoulder, this was massive.</p>
<p>There will be a part 2 because, to be honest, we did not completely solve it. Right now, all the values are hard coded and not coming from a user's request. We will tackle this soon.</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/only-allow-owner-to-update-their-user-profile-in-laravel-with-a-policy</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/only-allow-owner-to-update-their-user-profile-in-laravel-with-a-policy" />
    <title>Only allow owner to update their user profile in Laravel with a policy</title>
    <published>2020-04-10T00:00:00+00:00</published>
    <updated>2020-04-10T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">

You have a website that lists the profile of Laravel developers
The profile is just an extension of the &lt;code&gt;User&lt;/code&gt; model, so you have extra fields
For sake of simplicity, you have only one field in your profile that is the numbers of years......</summary>
    <content type="html"><![CDATA[
        <h2>The problem: Only owners should be allowed to edit their profiles</h2>
<ul>
<li>You have a website that lists the profile of Laravel developers</li>
<li>The profile is just an extension of the <code>User</code> model, so you have extra fields</li>
<li>For sake of simplicity, you have only one field in your profile that is the numbers of years you've been coding with Laravel</li>
<li>Developers listed should only be able to edit their own profile and not foreign profiles</li>
</ul>
<h2>The solution: Use a policy for the User model</h2>
<ul>
<li>We will write a <a href="https://laravel.com/docs/7.x/authorization#creating-policies">policy</a> that will be triggered when a user updates a profile</li>
<li>The policy checks whether you are the owner of the user profile</li>
<li>If you are, you can update the profile</li>
<li>If you are not the owner, your request will be denied</li>
</ul>
<h2>The step by step explanation</h2>
<ul>
<li>I will show you how to add this policy test-driven</li>
<li>I assume that you already created a fresh Laravel app and set up your database</li>
</ul>
<h3>Step 1: Write a failing test <code>user_can_update_own_profile</code></h3>
<ul>
<li>Create a test for the User model: <code>php artisan make:test Http/Controllers/UserControllerTest</code></li>
<li>We will write a test with how we wish our app should work if we are the owner of a profile</li>
<li>This is called the <em>Happy Path</em></li>
</ul>
<pre><code class="language-php">// tests/Feature/Http/Controllers/UserControllerTest.php

&lt;?php

namespace Tests\Feature\Http\Controllers;

use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function user_can_update_own_profile()
    {
        $user = factory(User::class)-&gt;create();
        $response = $this-&gt;actingAs($user)-&gt;post(route('user.profile.update', $user), [
            'experience_years' =&gt; 5,
        ]);

        $response-&gt;assertSuccessful();
        $user-&gt;refresh();
        $this-&gt;assertEquals(5, $user-&gt;experience_years);
    }
}</code></pre>
<ul>
<li>This test will fail for many reasons
<ul>
<li>We do not have a route named <code>user.profile.update</code> that we can send a <code>POST</code> request to</li>
<li>We do not have a <code>experience_years</code> property on the <code>User</code> model</li>
<li>We do not have a User controller that actually updates the model</li>
</ul></li>
<li>In a normal test-driven process, I would solve this error by error</li>
<li>As this tutorial is about policies, I will just solve all problems at once to get to the policy part</li>
</ul>
<h3>Step 2: Fix the test to assert that you can update your own profile</h3>
<ul>
<li>The solution: Update your migration, <code>User</code> model, <code>web.php</code> routes file and create a <code>UserController</code> with an <code>update</code> method that updates with everything passed with a request</li>
<li>I marked all new files with a <code>// ADD:</code> comment</li>
<li>I deleted all comments and unneccessary lines</li>
</ul>
<pre><code class="language-php">// Migration: database/migrations/2014_10_12_000000_create_users_table.php
// Your date in the filename should differ

&lt;?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateUsersTable extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table-&gt;id();
            $table-&gt;string('name');
            $table-&gt;string('email')-&gt;unique();
            $table-&gt;integer('experience_years')-&gt;nullable(); // ADD: nullable integer
            $table-&gt;timestamp('email_verified_at')-&gt;nullable();
            $table-&gt;string('password');
            $table-&gt;rememberToken();
            $table-&gt;timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
}
</code></pre>
<pre><code class="language-php">// User Model: app/User.php

&lt;?php

namespace App;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use Notifiable;

    protected $fillable = [
        'name', 'email', 'password', 'experience_years' // ADD: 'experience_years'
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];

    protected $casts = [
        'email_verified_at' =&gt; 'datetime',
    ];
}
</code></pre>
<pre><code class="language-php">// Routes: routes/web.php

&lt;?php

use Illuminate\Support\Facades\Route;

Route::post('/{user}/profile/update', 'UserController@update')-&gt;name('user.profile.update');
</code></pre>
<pre><code class="language-php">// Controller: app/Http/Controllers/UserController.php

&lt;?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function update(Request $request, User $user)
    {
        $user-&gt;update($request-&gt;all());
    }
}</code></pre>
<ul>
<li>You can now run the tests with <code>php artisan test</code>.</li>
<li>You should see two passing example tests and a passing test: <code>✓ user can update own profile</code></li>
<li>Let's try to update someone else's years of experience:</li>
</ul>
<h3>Step 3: Try to update someone else's profile – and fail</h3>
<pre><code class="language-php">/** @test */
    public function user_cannot_update_foreign_profile()
    {
        $user = factory(User::class)-&gt;create();
        $foreign_user = factory(User::class)-&gt;create([
            'experience_years' =&gt; 2,
        ]);
        $response = $this-&gt;actingAs($user)-&gt;post(route('user.profile.update', $foreign_user), [
            'experience_years' =&gt; 5,
        ]);

        $response-&gt;assertForbidden();
        $foreign_user-&gt;refresh();
        $this-&gt;assertEquals(2, $foreign_user-&gt;experience_years);
    }</code></pre>
<ul>
<li>This test will fail <code>Asserting that 5 is 2</code></li>
<li>This means: Yes, we can change someone else's profile</li>
<li>Not good!</li>
</ul>
<h3>Step 4: Add a policy to disallow changing someone else's profile</h3>
<ul>
<li>Solution: Add a policy to stopp this</li>
<li>Create the policy: <code>php artisan make:policy UserPolicy</code></li>
</ul>
<pre><code class="language-php">// Policy: app/Policies/UserPolicy.php

&lt;?php

namespace App\Policies;

use App\User;
use Illuminate\Auth\Access\Response;
use Illuminate\Auth\Access\HandlesAuthorization;

class UserPolicy
{
    use HandlesAuthorization;

    public function update(User $user, User $user_model)
    {
        return $user-&gt;id === $user_model-&gt;id ? Response::allow() : Response::deny();
    }
}
</code></pre>
<ul>
<li>Policies always have the current user passed via <code>User $user</code></li>
<li>The second argument is the model that we want to protect</li>
<li>Because we want to protect the user model, we need to pass it twice with differing names</li>
<li>Interpretation of the command: If the ID of the currently logged in user is the same as the id of the user model that is being tried to update, allow the update. If not, reject the update</li>
<li>Because we named the policy like the model, Laravel automatically finds it</li>
<li>We only need to apply the policy on the route</li>
</ul>
<pre><code class="language-php">// Routes with policy: routes/web.php

&lt;?php

use Illuminate\Support\Facades\Route;

Route::post('/{user}/profile/update', 'UserController@update')-&gt;name('user.profile.update')-&gt;middleware('can:update,user');
</code></pre>
<p>The <code>-&gt;middleware('can:update,user)</code> means: Authorize the <code>update()</code> action and pass the <code>user</code> URL parameter to the policy (that's our <code>$user_model</code> in the policy).</p>
<h2>Repo and extension</h2>
<ul>
<li>If you have problems following the code, check out the repo on <a href="https://github.com/minthemiddle/200410-listing">Github</a>.</li>
<li>If you want to extend this functionality, try to add an exception for admins: They should be able to change every profile</li>
</ul>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/todo-paper-audio-todoist</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/todo-paper-audio-todoist" />
    <title>How I manage my todos</title>
    <published>2020-02-04T00:00:00+00:00</published>
    <updated>2020-02-04T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">To manage my todos, I use a mishmash of Getting Things Done, Bullet Journal and personal likings.

I try to capture todos with whatever of these three methods is most convenient at the time

Paper: I use squared paper and three symbol types,......</summary>
    <content type="html"><![CDATA[
        <p>To manage my todos, I use a mishmash of Getting Things Done, Bullet Journal and personal likings.</p>
<ul>
<li>I try to capture todos with whatever of these three methods is most convenient at the time
<ul>
<li><strong>Paper</strong>: I use squared paper and three symbol types, <code>ᐧ</code> (dot) for a todo, <code>o</code> for a log (&quot;I worked out for 3 minutes&quot; and <code>-</code> for a thought</li>
<li><strong>Audio</strong>: I use a Zoom H1 voice recorder to capture stuff in situations where I do not want to write</li>
<li><strong>Todoist</strong>: If on the computer, I save all todos directly in Todoist's Inbox</li>
</ul></li>
<li>At the end of every day I transfer todos from paper and audio to Todoist</li>
<li>On paper I mark the transferred items with a <code>&gt;</code> and shred the paper once I transferred all items</li>
<li>In Todoist is use projects with emoji names</li>
<li>I move all todos into the respective project</li>
<li>I keep it simple and work on projects and prioritize within them by sorting the todos manually</li>
<li>Seldomly I use labels: I have labels for lengths, such as <code>_5</code>, <code>_25</code> and <code>_50</code> and also labels for context, such as <code>_email</code> and <code>_call</code> that I sometimes use to prioritize</li>
</ul>
<p><img src="/assets/img/articles/todoist.png" alt="Managing todos with Todoist" /></p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/how-to-write-emails</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/how-to-write-emails" />
    <title>How to write emails</title>
    <published>2020-02-02T00:00:00+00:00</published>
    <updated>2020-02-02T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">Writing good emails is the key competency in any job in my opinion. Here is my checklist on how to craft good emails and one example.

Make it scannable.
Lead with your ask.
Establish your credibility.
Propose next steps.
Give a deadline.
If asking a......</summary>
    <content type="html"><![CDATA[
        <p>Writing good emails is the key competency in any job in my opinion. Here is my checklist on how to craft good emails and one example.</p>
<ul>
<li>Make it <strong>scannable</strong>.</li>
<li><strong>Lead with</strong> your <strong>ask</strong>.</li>
<li><strong>Establish</strong> your credibility.</li>
<li>Propose <strong>next steps</strong>.</li>
<li>Give a <strong>deadline</strong>.</li>
<li><strong>If</strong> asking a <strong>question</strong>, <strong>propose a solution</strong>.</li>
<li>Write your <strong>subject lines like article headlines</strong>.</li>
<li><strong>Preview</strong> all messages <strong>on your smartphone</strong>.</li>
<li><strong>Edit</strong> all your emails. Never use the first draft.</li>
</ul>
<p>What are your tipps for writing emails that get results? Contact me via the link below!</p>
<p>Disclaimer: A lot of these tips come from the book <a href="https://withoutbullshit.com/book">Writing Without Bullshit</a> that I tweak to my language and experience.</p>
<pre><code class="language-yaml">To: editor@magazine.com
# Headline type subject
Title: Cooperation on article on crafting emails?

Dear Peter,

# Lead with the ask
do you want to cooperate with me on an article on writing good emails?

# Establish credibility
I have been writing 10+ high-ranking articles on crafting emails in magazines such as GQ (link) and Harper's Bazaar (link) and got hundreds of positive responses from readers. I think that your magazine could profit from my expertise.

# Propose next steps
If you give me your "okay" for considering the idea, I can send you an outline within 4 working days.

# Give a **deadline**
Could you please send me a "yes" or "no" by Monday, 02, so we both can move forward?

Best
Martin</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/mac-mail-distraction-free-mailmate</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/mac-mail-distraction-free-mailmate" />
    <title>Distraction-free Email with Mailmate on Mac</title>
    <published>2020-01-31T00:00:00+00:00</published>
    <updated>2020-01-31T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">Email can eat up all your attention or can be a power tool to purposefully connect with your world. Setting a timebox is my tactic. I only read and answer mails in this slot. During the day I still want to send and find emails, so I want to avoid seeing......</summary>
    <content type="html"><![CDATA[
        <p>Email can eat up all your attention or can be a power tool to purposefully connect with your world. Setting a timebox is my tactic. I only read and answer mails in this slot. During the day I still want to send and find emails, so I want to avoid seeing new emails that might derail me from my initial plan. Having a sensitive setup will help you with not getting disturbed by email during your day.</p>
<p>I use Mailmate, a powerfull customizable client. Here are my tipps for using it mindfully:</p>
<ul>
<li>Disable autosync for all your accounts so you decide when new email flows in
<ul>
<li>Right-click on sources</li>
<li><code>Synchronize schedule &gt; Manual</code></li>
</ul></li>
<li>Go offline completely so certainly no new mails come in
<ul>
<li>Select all sources</li>
<li><code>Take offline</code></li>
<li>When you craft and send an email when being offline, it will just be sent when you go online again</li>
</ul></li>
<li>Select an empty folder before quitting the application
<ul>
<li>Mailmate will open with the last selected folder</li>
<li>I created a search folder that never returns a result with the criteria: <code>From &gt; contains &gt; RANDOMLONGSTRING</code></li>
<li>I named this folder 🙂</li>
</ul></li>
<li>Disable all counters
<ul>
<li>Select all folder &gt; Right-click &gt; <code>Count &gt; None</code></li>
<li>Select all sources &gt; Right-click &gt; <code>Count &gt; None</code></li>
</ul></li>
<li>If you wait for a email – like a 2-factor auth code – that you need to receive outside of your mail time, set a specific search with “from” or “subject” and refresh the specific mailbox/source only</li>
</ul>
<p><img src="/assets/img/articles/mailmate.png" alt="Distraction free email client Mailmate" /></p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/apple-calendar-pomodoro</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/apple-calendar-pomodoro" />
    <title>How to use Apple Calendar with Pomodoro</title>
    <published>2020-01-29T00:00:00+00:00</published>
    <updated>2020-01-29T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">Breaking down your day in many small 25 minutes blocks is called Pomodoro. Visualizing and managing these blocks can be challenging. Luckily Apple Calendar helps with it. These are my best practices:

Create an extra calendar just for day planning......</summary>
    <content type="html"><![CDATA[
        <p>Breaking down your day in many small 25 minutes blocks is called Pomodoro. Visualizing and managing these blocks can be challenging. Luckily Apple Calendar helps with it. These are my best practices:</p>
<ul>
<li>Create an extra calendar just for day planning</li>
<li>Instead of the default 1 hour blocks, you can set the default to 25. Go to your terminal and enter the following: <code>defaults write com.apple.iCal 'Default duration in minutes for new event' 25</code></li>
<li>Name your blocks according to the topic of your block, such as <code>Productivity</code></li>
<li>Use emojis before the name, such as <code>📎 Sorting</code>, this will help you find and count your blocks</li>
<li>Plan at least 5 minutes between each pomodoro block</li>
<li>Click <code>shift</code> to select several blocks</li>
<li>Move blocks in 15min steps up and down with<code>ctrl + alt + down/up</code> (Hint: Window manager <code>Magnet</code> overwrites these keystrokes but can be reconfigured)</li>
<li>Copy blocks between days pressing <code>alt</code> and dragging and dropping the block</li>
<li>Use a past day and week when you did not use the system yet and fill with template blocks to create a library</li>
<li>Use search to find blocks in your library that you do not have readily available from the past few days; typing the first few characters will suffice</li>
<li>Always use a second physical timer (I use a kitchen timer where I removed the audio signals) to stay in the time frame</li>
<li>Always adjust differences like delays, skipped or extra pomodoros when or even after they happen – no plan is perfect anyway</li>
<li>For extra information that you want to display, such as task description, misuse the location field and it will show on the pomodoro block</li>
</ul>
<p><img src="/assets/img/articles/pomo-apple-calendar.png" alt="Day with pomodoros in Apple Calendar" /></p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/jigsaw-github-pages</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/jigsaw-github-pages" />
    <title>How I deploy my Jigsaw blog to Github Pages</title>
    <published>2020-01-28T00:00:00+00:00</published>
    <updated>2020-01-28T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">I use Tighten&#039;s Jigsaw to build this website and blog. I used to host it on Netlify and let it build it as well. But as I make many granular edits and the build taking two 2 minutes, I was looking for a quicker alternative where I just push the output......</summary>
    <content type="html"><![CDATA[
        <p>I use Tighten's Jigsaw to build this website and blog. I used to host it on Netlify and let it build it as well. But as I make many granular edits and the build taking two 2 minutes, I was looking for a quicker alternative where I just push the output HTML files instead of the source files. Turns out that Github Pages is what I looked for.</p>
<p>Since I had some problems setting it up, here is my final working solution:</p>
<ul>
<li>For every now post, I create a feature branch, say <code>add-article-jigsaw-github-pages-deployment</code></li>
<li>When done, I go to master and merge: <code>gcm &amp;&amp; gm add-article-jigsaw-github-pages-deployment</code> (using <code>zsh</code> aliases)</li>
<li>Then I check out a running branch called <code>gh-pages</code>. I do not want the changes to the HTML in my master, so I just save them here</li>
<li>In <code>gh-pages</code> I first rebase to put the output HTML commits ahead of master: <code>grbm</code></li>
<li>If rebasing causes trouble, I just force delete the <code>gh-pages</code> branch (<code>gb -D gh-pages</code>) and create it afresh (its only purpose is to keep my master branch clean by not versioning the production output files)</li>
<li>Then I run Jigsaw: <code>npm run production</code></li>
<li>Next I create a bump commit with date and running number: <code>ga . &amp;&amp; gcmsg "Bump: 200128-001"</code></li>
<li>Then I force push just the subdirectory <code>build_production</code> with the following command to my <code>github</code> remote repo:</li>
</ul>
<pre><code>git push github `git subtree split --prefix build_production`:gh-pages --force</code></pre>
<ul>
<li>I also have an alias for that in my <code>~/.zshrc</code>: <code>ghpmb</code> (where mb stands for martinbetz)</li>
<li>That's it!</li>
</ul>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/laravel-rss-to-follow</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/laravel-rss-to-follow" />
    <title>Laravel blogs to follow via RSS</title>
    <published>2020-01-06T00:00:00+00:00</published>
    <updated>2020-01-06T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">There are many high quality blogs on Laravel and related topics, such as Tailwind, Livewire, AlpineJS and VueJS. There are some well-known bloggers, such as Freek and Matt Stauffer, but also some lesser-known yet excellent ones.
Here are the direct links......</summary>
    <content type="html"><![CDATA[
        <p>There are many high quality blogs on Laravel and related topics, such as Tailwind, Livewire, AlpineJS and VueJS. There are some well-known bloggers, such as Freek and Matt Stauffer, but also some lesser-known yet excellent ones.</p>
<p>Here are the direct links to the RSS feeds, the list is sorted alphabetically:</p>
<ul>
<li><a href="https://42coders.com/blog">42Coders</a> (<a href="https://42coders.com/feed/">RSS</a>)</li>
<li><a href="https://www.amitmerchant.com">Amit Merchant</a> (<a href="https://www.amitmerchant.com/feed">RSS</a>)</li>
<li><a href="https://benfurfie.co.uk">Ben Furfie's Blog</a> (<a href="https://benfurfie.co.uk/feed">RSS</a>)</li>
<li><a href="http://calebporzio.com">Caleb Porzio</a> (<a href="http://calebporzio.com/feed/">RSS</a>)</li>
<li><a href="http://christoph-rumpel.com">Christoph Rumpel</a> (<a href="http://christoph-rumpel.com/feed.xml">RSS</a>)</li>
<li><a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCQI-Ym2rLZx52vEoqlPQMdg">Coder's Tape</a> (<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCQI-Ym2rLZx52vEoqlPQMdg">RSS</a>)</li>
<li><a href="http://daylerees.com">Dayle Rees</a> (<a href="http://daylerees.com/feed/">RSS</a>)</li>
<li><a href="https://divinglaravel.com">Diving Laravel</a> (<a href="https://divinglaravel.com/feed">RSS</a>)</li>
<li><a href="https://driesvints.com/blog">Dries Vints</a> (<a href="https://driesvints.com/blog/feed.atom">RSS</a>)</li>
<li><a href="https://dyrynda.com.au/blog">Dyrynda</a> (<a href="https://dyrynda.com.au/blog/feed">RSS</a>)</li>
<li><a href="https://murze.be">freek.dev</a> (<a href="https://murze.be/feed/">RSS</a>)</li>
<li><a href="https://jasonmccreary.me">Jason McCreary</a> (<a href="https://jasonmccreary.me/feed.atom">RSS</a>)</li>
<li><a href="https://reinink.ca">Jonathan Reinink</a> (<a href="https://reinink.ca/rss">RSS</a>)</li>
<li><a href="http://laraveldaily.com">Laravel Daily</a> (<a href="http://laraveldaily.com/feed/">RSS</a>)</li>
<li><a href="https://laravel-news.com/links">Laravel News Links</a> (<a href="https://feedpress.me/laravel-links">RSS</a>)</li>
<li><a href="https://laravel-news.com/">Laravel News</a> (<a href="https://feed.laravel-news.com/">RSS</a>)</li>
<li><a href="https://www.larashout.com">LaraShout</a> (<a href="https://www.larashout.com/feed">RSS</a>)</li>
<li><a href="http://www.laravel-tricks.com">Laravel-Tricks</a> (<a href="http://www.laravel-tricks.com/feed">RSS</a>)</li>
<li><a href="https://martinbetz.eu/blog">Martin Betz</a> (<a href="https://martinbetz.eu/blog/feed.atom">RSS</a>)</li>
<li><a href="https://matthewdaly.co.uk">Matthew Daly's Blog</a> (<a href="https://matthewdaly.co.uk/rss.xml">RSS</a>)</li>
<li><a href="https://ma.ttias.be/blog">Matthias Geniar</a> (<a href="https://ma.ttias.be/blog/index.xml">RSS</a>)</li>
<li><a href="http://mattstauffer.co/blog">MattStauffer.com</a> (<a href="http://mattstauffer.co/blog/feed.atom">RSS</a>)</li>
<li><a href="https://mauricius.dev">Maurizio Bonani</a> (<a href="https://mauricius.dev/index.xml">RSS</a>)</li>
<li><a href="https://themsaid.com">Mohamed Said</a> (<a href="https://themsaid.com/feed">RSS</a>)</li>
<li><a href="https://ohseemedia.com">Oh See Media</a> (<a href="https://ohseemedia.com/feed">RSS</a>)</li>
<li><a href="http://feeds2.feedburner.com">Paulund</a> (<a href="http://feeds2.feedburner.com/Paulundcouk">RSS</a>)</li>
<li><a href="https://pociot.dev">pociot.dev</a> (<a href="https://pociot.dev/feed">RSS</a>)</li>
<li><a href="https://sebastiandedeyne.com">Sebastian De Deyne</a> (<a href="https://sebastiandedeyne.com/index.xml">RSS</a>)</li>
<li><a href="http://shawnmc.cool">Shawn McCool</a> (<a href="http://shawnmc.cool/feed">RSS</a>)</li>
<li><a href="https://stackcoder.in/">Stackcoder</a> (<a href="https://stackcoder.in/feed">RSS</a>)</li>
<li><a href="https://www.stitcher.io/https://www.stitcher.io">stitcher.io</a> (<a href="https://www.stitcher.io/https://www.stitcher.io/rss">RSS</a>)</li>
<li><a href="https://tighten.co/blog">Tighten Blog</a> (<a href="https://tighten.co/blog/feed.atom">RSS</a>)</li>
<li><a href="https://timacdonald.me">Tim MacDonald</a> (<a href="https://timacdonald.me/feed.xml">RSS</a>)</li>
</ul>
<p>If you know more Laravel blogs to follow, just send them to me and I'll add them.</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/simple-user-roles-in-laravel</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/simple-user-roles-in-laravel" />
    <title>Simple user roles in Laravel</title>
    <published>2019-12-27T00:00:00+00:00</published>
    <updated>2019-12-27T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">If you do only have roles for your users – such as admin, contributor and user – and you want to restrict access to routes only, advanced (and excellent) packages may be too heavy for you.
Let me show you how to solve this authorization problem very......</summary>
    <content type="html"><![CDATA[
        <p>If you do only have roles for your users – such as admin, contributor and user – and you want to restrict access to routes only, advanced (and excellent) packages may be too heavy for you.
Let me show you how to solve this authorization problem very easily.</p>
<p>Your user model needs an extra field to store the role of every user. Let's add a string field which will hold values such as <code>user</code>, <code>manager</code> or <code>admin</code>. Every user needs a role, so this field is not nullable and has a default of <code>user</code>. Of course you have more fields in your user model, I'll add an email field to the user for demonstration purposes.</p>
<pre><code class="language-php">// Create migration
// create_users_table.php

Schema::create('users', function (Blueprint $table) {
  ...
  $table-&gt;string('email')-&gt;unique();
  $table-&gt;string('role')-&gt;default('user');
  ...
}</code></pre>
<p>Let's create a test user, using Laravel's tinker app, test it's default role and upgrade it to <code>admin</code>.
<code>php artisan tinker</code></p>
<pre><code class="language-php">// Create test user
$user = App\User::create(['email' =&gt; 'test01@test.test']);
$user-&gt;role; // 'user'

// Upgrade user to admin
$user-&gt;role = 'admin';
$user-&gt;save();</code></pre>
<p>Until now, the user role is just a string and does not do anything. Let's change this by generating a custom middleware. Middlewares can be attached to routes and control who has access to those routes.</p>
<p>For example, to restrict the access to <code>/logged-in-users-only</code> to logged in users, you would create the following function in your routes file:</p>
<pre><code class="language-php">// routes/web.php
Route::get('logged-in-users-only', function () {
  return 'Only logged in users can see this';
})-&gt;middleware('auth');</code></pre>
<p>We can restrict routes to user roles with a custom middleware:</p>
<p><code>php artisan make:middleware UserRoles</code></p>
<p>This will create a middleware file that we can customize:</p>
<pre><code class="language-php">// Http/Middleware/UserRoles
public function handle($request, Closure $next, ...$roles)
{
  return collect($roles)-&gt;contains(auth()-&gt;user()-&gt;role) ? $next($request) : back();
}</code></pre>
<p>This <code>handle()</code> method will only allow people access the route if their role is in the list of allowed roles in the protected route.</p>
<p>Here is the whole <code>return</code> one-liner in natural language:</p>
<blockquote>
<p>If the collection of rules contains the logged in user's role, then allow and process the request, otherwise redirect the user back.</p>
</blockquote>
<ul>
<li><code>...$roles</code> allows to pass multiple roles at once, the resulting <code>$roles</code> is an array with all parameters</li>
<li>With <code>collect()</code> I create a collection out of the array, so I can use collection methods and chain them, such as <code>contains()</code></li>
<li><code>contains()</code> will check whether the role is in the collection</li>
<li><code>return CONDITION ? THEN : ELSE</code> is called a ternary operator and a shorter version of <code>if (CONDITION) { then } else { }</code></li>
</ul>
<p>To make use of this middleware, we need to register it in the kernel:</p>
<pre><code class="language-php">// Http/Kernel.php

use App\Http\Middleware\UserRoles;
...

protected $routeMiddleware = [
  ...
  'roles' =&gt; UserRoles::class,
];</code></pre>
<p>To only allow users with role <code>admin</code> to a route, you create it like the following:</p>
<pre><code class="language-php">// routes/web.php
Route::get('types', function () {
  return 'Access granted';
})-&gt;name('test.roles')-&gt;middleware('roles:admin');</code></pre>
<p>And because we allow to pass more than one role (remember the <code>...$roles</code>) to the middleware, we can allow several roles to access the same route. Let's also give the <code>manager</code> access to this route:</p>
<pre><code class="language-php">// routes/web.php
Route::get('types', function () {
  return 'Access granted';
})-&gt;name('test.roles')-&gt;middleware('roles:admin,manager'); // no space after comma!</code></pre>
<p>One risk with this approach is that you pass roles around as strings. You always need to remember which roles you have and how you named them. A small typo such as <code>adnin</code> instead of <code>admin</code> will be hard to spot and renaming a role (e.g. <code>manager</code> to become <code>editor</code>) can easily break your system.</p>
<p>In the next iteration of this article, I will introduce <code>Enums</code> to help reducing this risk, but for now this solution is lean and will solve your basic needs.</p>
<p>P.S. If you have suggestions on refactoring or improving, please send me a mail:</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/fragebuecher</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/fragebuecher" />
    <title>Fragebücher</title>
    <published>2019-01-27T00:00:00+00:00</published>
    <updated>2019-01-27T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">Eine gute Frage kann ein Gespräch eröffnen, am Leben halten und es spannend machen. Es gibt eine Reihe von Büchern, in denen Ideen für Fragen aufgelistet sind.
Das bekannteste Buch ist sicher Max Frisch&#039; Fragebogen.
Hier stelle ich eine Reihe von......</summary>
    <content type="html"><![CDATA[
        <p>Eine gute Frage kann ein Gespräch eröffnen, am Leben halten und es spannend machen. Es gibt eine Reihe von Büchern, in denen Ideen für Fragen aufgelistet sind.</p>
<p>Das bekannteste Buch ist sicher Max Frisch' Fragebogen.</p>
<p>Hier stelle ich eine Reihe von weiteren Büchern kurz vor:</p>
<ul>
<li><strong>Krogerus/Tschäpeller: Kinderfragebuch (Kein&amp;Aber, 2012)</strong>. Mein Lieblingsfragebuch; hübsch illustriert, viele lustige Fragen, z.B. &quot;Was kochen deine Eltern am schlechtesten&quot;. Auch sehr gut für Erwachsene geeignet, die die Fragerei nicht zu ernst nehmen wollen.</li>
<li><strong>Krogerus/Tschäpeller: Fragebuch (Kein&amp;Aber, 2014)</strong>. Gleiche Autoren, gleiche hohe Qualität. Geeignet, um &quot;sich und andere besser kennenzulernen&quot; – und zwar direkt zum Ausfüllen.</li>
<li><strong>Stock: The Book Of Questions (Workman, 1987)</strong>. Der Klassiker auf Englisch im kleinen handlichen Format mit 1-3 Fragen pro Seite. Leider sind die Fragen unsortiert und auch zu oft mit einfachem Ja oder Nein zu beantworten.</li>
<li><strong>Stock: Das Fragenbuch für Kids (Ravensburger, 1991)</strong>. Auch Stock hat ein Buch für Kinder geschrieben. Leider auch unsortiert, die Fragen finde ich aber gut. Krogerus sieht besser aus und ist deutlich besser aufgebaut.</li>
<li><strong>Dobelli: Wer bin ich? (Diogenes, 2007)</strong>. 777 Fragen zur Selbsterkenntnis. Viele philosophische Themen, bei denen eine Antwort Zeit braucht.</li>
<li><strong>Hogan: 1000 Fragen, die Liebe betreffend (Schwarzkopf &amp; Schwarzkopf, 2005)</strong>. Gute Fragen für Menschen in jeder Phase einer Beziehung; auch schon sortiert. Den umfangreichen Begleittext kann man aber überspringen.</li>
<li><strong>Kindl-Beilfuß: Fragen können we Küsse schmecken (Carl-Auer, 2010)</strong>. Keine Sammlung von Fragen, sondern eine sehr gelungene Anleitung, vor allem für Psychotherapeuten, wie man Fragen für verschiedene Situationen findet und anwendet, z.B. das biographische Interview.</li>
<li><strong>Funcke/Rachow: Was ist eigentlich Ihre Lieblingsfrage (managerSeminare, 2016)</strong>. Fragen für jede Gelegenheit, die aufgeteilt sind nach der Intention z.B. Fragen, die zurückgreifen und Fragen, die in die Tiefe gehen. Buch richtet sich an Trainer, Moderatoren und Berater, ist jedoch für alle Frageliebhaber eine Inspiration. Gute Liste mit weiteren Fragebüchern.</li>
</ul>
<p>Auf meiner Seite <a href="https://mehrfragen.de">mehrfragen.de</a> sammle ich meine Lieblingsfragen aus vielen Bereichen.</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/blur-test</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/blur-test" />
    <title>CSS blur test</title>
    <published>2018-12-20T00:00:00+00:00</published>
    <updated>2018-12-20T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">TL;DR: To evaluate the hierarchies on your website, use the &lt;code&gt;filter: blur(5px)&lt;/code&gt; style on your &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element.

Not everything is equally important on your website: Every single page should have one single goal (signing up......</summary>
    <content type="html"><![CDATA[
        <p><strong>TL;DR:</strong> To evaluate the hierarchies on your website, use the <code>filter: blur(5px)</code> style on your <code>&lt;body&gt;</code> element.</p>
<h2>Why hierarchies matter</h2>
<p>Not everything is equally important on your website: Every single page should have <em>one single goal</em> (signing up for a newsletter, click the buying button, display the one information everyone looks for).</p>
<p>Also, some <em>elements belong together</em> to give the reader orientation (image and label, intro and list). Whitespace at the right amount and place is what gives orientation, and structure.</p>
<h2>How to test hierarchies</h2>
<p>To test your hierarchies, it helps to get a bird's eye view over your website.</p>
<p>The best way to test your hierarchies is the <em>blur test</em>. By blurring out the specific content, you will quickly recognize borders, space and sizing.</p>
<h2>How to apply blur effect in CSS</h2>
<p>The quickest way to do the blur test is by using the <code>blur</code> CSS filter.</p>
<p>You can either create an own class and apply it when testing:</p>
<pre><code class="language-html">&lt;style&gt;
.blurtest {
    filter: blur(5px);
}
&lt;/style&gt;
&lt;body class="blurtest"&gt;
&lt;/body&gt;</code></pre>
<p>Or you simply create an on-the-fly class using Chrome's DevTools or Firefox' Inspector</p>
<img class="border-2 rounded border-grey shadow-inline" src="/assets/img/articles/blurtest-inspector.png" alt="">    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/visual-studio-code-web-design</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/visual-studio-code-web-design" />
    <title>How to use Visual Studio Code for web design</title>
    <published>2018-03-06T00:00:00+00:00</published>
    <updated>2018-03-06T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">To design web pages, you should really use a good text editor. Microsoft’s open source text editor Visual Studio Code (VSC) is such an editor. Here is how I set it up and which plugins help me having a good time while writing HTML and CSS.
I update......</summary>
    <content type="html"><![CDATA[
        <p>To design web pages, you should really use a good text editor. Microsoft’s open source text editor Visual Studio Code (VSC) is such an editor. Here is how I set it up and which plugins help me having a good time while writing HTML and CSS.</p>
<p>I update this article whenever there is a new version of VSCode. (Latest changes reflected: <a href="https://code.visualstudio.com/updates/v1_30">v1.30.2-Novemer 2018</a></p>
<h2>Basics</h2>
<p><strong>Installing VSC:</strong> You can download Visual Studio Code for free <a href="https://code.visualstudio.com/Download">here</a>. If you happen to be on a Mac, you should really use <a href="https://brew.sh/index_de">Brew</a> to install packages. You can then just install VSC with <code>brew install visual-studio-code</code>. On Windows, <a href="https://chocolatey.org/">chocolatey</a> would be the equivalent package manager and <code>choco install visualstudiocode</code> the command to go for.</p>
<p><strong>Always use latest version:</strong> Be sure to always update VSC to the latest version. Microsoft releases great new features every month and you do not want to miss a single one. Just use <code>Code &gt; Check For Updates…</code></p>
<p><strong>Open Projects:</strong> To open VSC, always browse to your project folder on the terminal and fire up the editor with <code>code .</code>. This way, you open your whole project as one.</p>
<p>This is how a <em>HTML5 Boilerplate</em> project looks like after startup via code .</p>
<p><img src="/assets/img/articles/vsc-blank.png" alt="Blank Visual Studio Code window" /></p>
<p><strong>Use <code>Cmd+P</code>:</strong> To switch between files, you would usually use tabs. That might be okay when you have one <code>index.html</code> and one <code>style.css</code> file, but even with our example HTML5 Boilerplate and its many files, it already gets complicated. It is much faster and visually pleasing to use <code>cmd+p</code> with its typeahead functionality to quickly find and edit the file you need. Let me show you what I mean.</p>
<video src="/assets/video/vsc-webdesign.webm" class="w-full" controls="true"><video src="/assets/video/vsc-webdesign.webm" class="w-full" controls="true"></video></video>
<p><strong>Use symbols to jump within file:</strong> Wonder, where you hid that <code>h2</code> heading in your <code>main.css</code>? Well, you could browse the whole file or memorise it. Or you can just hit <code>cmd+shift+o</code> to quickly go to a definition within your HTML and CSS files.</p>
<p>This is how I would find my <code>&lt;h1&gt;</code> definition in <code>main.css</code>:</p>
<p>I just hit <code>cmd+shift+o</code>, type in <code>h</code> and in the typeahead list I already see the <code>h2</code> definitions. Of course I can switch with the up and down keys.</p>
<p><img src="/assets/img/articles/vsc-quick-jump.png" alt="Visual Studio Code Quick Jump" /></p>
<p><strong>Use Emmet</strong>: To massively speed up typing HTML, use Emmet. It is a shortcut-language which expands to HTML. You write <code>h2&gt;div*2</code> and hit Tab. It expands to the following.</p>
<pre><code class="language-html">&lt;h2&gt;
      &lt;div&gt;&lt;/div&gt;
      &lt;div&gt;&lt;/div&gt;
&lt;/h2&gt;</code></pre>
<p>Use this <a href="https://docs.emmet.io/cheat-sheet/">cheatsheet</a> to learn all the commands Emmet has.</p>
<h2>Settings</h2>
<p>You can customise all your settings in <code>Code &gt; Preferences &gt; Settings</code>. Here are my most important settings:</p>
<pre><code class="language-js">{ // your settings file must begin like this
      "editor.fontSize": 14, // see note #1    
      "editor.lineHeight": 28, // see note #2
      "editor.wordWrap": "on", // #2
      "workbench.editor.showTabs": "off" // #3
      "editor.minimap.enabled": true, // #4
      "editor.minimap.renderCharacters": true // #4, no comma after the last setting!
}</code></pre>
<ol>
<li>I prefer to have some <em>space between</em> my lines, so I double the linespacing. And I increase the font size so I can move away from my monitor a bit more.</li>
<li>By default, words do not wrap at line endings. I prefer that they do.</li>
<li>As described above, <code>cmd+p</code> is so much faster than tabs. Use this, not tabs!</li>
<li><em>Minimaps</em> helps you to keep a bird’s eye overview</li>
</ol>
<h2>Plugins</h2>
<p>There are a few VSC plugins that I can wholeheartedly recommend to you for web design projects.</p>
<p>Just install them with <code>cmd+shift+p</code>, type <code>install</code> and select <code>Extensions: Install</code>. In the search bar, type in the name and click on the install buttons next to the plugin.</p>
<ul>
<li><strong>beautify</strong>: This gives your HTML and CSS files auto indentation and makes them easier to read.</li>
<li><strong>Bootstrap 4 &amp; Font awesome snippets</strong>: With this installed, in every HTML document, you can just type b4 and you get a list of Bootstrap 4 snippets at your fingertips. Very handy!</li>
<li><strong>cdnjs</strong>: Quickly add your favourite libraries from the command line. Just enter <code>cmd+shift+p &gt; cdnjs</code> and search for something nice, for example Bulma.</li>
<li><strong>Close HTML/XML tag</strong>: Does exactly what it promises. Helps you closing your tags</li>
<li><strong>HTML Snippets</strong>: Another set of snippets, this time HTML5 semantic snippets. Has no prefix, just use the tag, so for examplefigure will spit out a whole figure set.</li>
<li><strong>Material Icon Theme:</strong> Pure aesthetics, but your folder and files look a lot nicer with this one</li>
<li><strong>Sublime Material Theme:</strong> Another eye-candy. See whether you like it. Most people do.</li>
</ul>
<h2>Notable Features</h2>
<p>These are a few features that are relatively new and might help you more than they do help me right now…</p>
<ul>
<li><a href="https://code.visualstudio.com/updates/v1_30">Custom HTML tags/attributes</a> (since v.1.30)</li>
<li><a href="https://code.visualstudio.com/updates/v1_27#_path-completion-for-css-imports">Path completion for CSS imports </a>(since v.1.27)</li>
<li><a href="https://code.visualstudio.com/updates/v1_23#_css-region-folding">Fold CSS region</a> with /<em> #region </em>/ and /<em> #endregion </em>/ (since v.1.23)</li>
</ul>
<h2>Other resources</h2>
<ul>
<li><a href="https://code.visualstudio.com/docs/languages/html">HTML in Visual Studio Code</a></li>
<li><a href="https://code.visualstudio.com/docs/languages/css">CSS, SCSS and Less</a></li>
</ul>
<p><em>How do you set up Visual Studio Code for web design projects? And which other plugins do you use on a regular base?</em></p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/quick-tools-vue</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/quick-tools-vue" />
    <title>Quick tools with VueJS</title>
    <published>2018-02-25T00:00:00+00:00</published>
    <updated>2018-02-25T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">
I used to write down the total number of tasks in a row in Excel and add a row for my done tasks. I would add a ratio row and do the math to see my progress.
That setup is flexible and worked pretty well, but it looked boring. Well, just like an Excel......</summary>
    <content type="html"><![CDATA[
        <h2>Before: Tools with Excel</h2>
<p>I used to write down the total number of tasks in a row in Excel and add a row for my done tasks. I would add a ratio row and do the math to see my progress.</p>
<p>That setup is flexible and worked pretty well, but it looked boring. Well, just like an Excel sheet looks like.</p>
<p><img src="/assets/img/articles/vuejs-excel-tool.png" alt="Excel tool" /></p>
<p>I need to confess that visuals make a huge motivation difference for me.</p>
<h2>After: Tools with JS, CSS, LocalStorage</h2>
<p>That is why I need a good toolbox for creating helpers that are…</p>
<ul>
<li>Easy to implement</li>
<li>Easy to adjust and extend</li>
<li>Looking nice</li>
</ul>
<p>The modern web universe has such tools:</p>
<ul>
<li><a href="https://gist.github.com/tailwindcss.com">TailwindCSS</a> lets me write beautiful yet flexible UIs in minutes not hours</li>
<li><a href="https://gist.github.com/vuejs.org">VueJS</a> is a drop-in extension to make my HTML dynamic without adding extra tooling</li>
<li><a href="https://www.taniarascia.com/how-to-use-local-storage-with-javascript/">LocalStorage</a> lets me persist all the data that I enter and process</li>
</ul>
<p>Here is how my little example task progress tracker looks like using these tools:</p>
<p><img src="/assets/img/articles/vuejs-todo-counter.png" alt="VueJS Todo Counter" /></p>
<p>Let me do a quick tour of the feature that I use frequently to build tools like this task tracker:</p>
<ul>
<li><strong>TailwindCSS from CDN</strong>: In JSBin I have a boilerplate with Tailwind so the page looks good from line 1 <code>&lt;link href="https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css" rel="stylesheet"&gt;</code></li>
<li><strong>Antialiasing</strong> <code>&lt;body class="antialiased"&gt;</code> - This smoothes all fonts</li>
<li><strong>VueJS from CDN</strong> <code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.3/vue.js"&gt;&lt;/script&gt;</code> Pull in VueJS to make the page dynamic</li>
<li><strong>Quick role-model-binding</strong> To fetch my entries and process them with VueJS, I add a simple v-model: <code>&lt;input v-model=“tasks.done” name=“done"&gt;</code></li>
</ul>
<p>The actual power comes from a few lines of JavaScript. Let me explain with inline comments</p>
<pre><code class="language-javascript">var app = new Vue({},
computed: { /* Calculate the ratio */
    ratio: function() {
        return Math.floor(this.tasks.done / this.tasks.total * 100) + '%'
    }
},
watch: { /* Observe changes and write to LocalStorage */
    tasks: {
        handler() {
            console.log('Tasks changed');
            localStorage.setItem('tasks', JSON.stringify(this.tasks));
        },
        deep: true,
    }
},
mounted() { /* Load values from LocalStorage and load */
    console.log('App mounted');
    if (localStorage.getItem('tasks')) this.tasks = JSON.parse(localStorage.getItem('tasks'));
}
})</code></pre>
<h2>Write endless simple tools with this setup</h2>
<p>The combination of the three technologies (HTML + CSS Framework, JavaScript, LocalStorage) makes it super easy to create simple yet flexible and beautiful tools.</p>
<p>Other tools that I built the same way:</p>
<ul>
<li>Day and pomodoro planner</li>
<li>Customized todo app</li>
<li>Cryptocurrency price tracker (using jQuery’s <code>$.getJSON('API-URI')</code> as I did not find a drop in replacement for VueJS)</li>
</ul>
<p>There are endless opportunities to create flexible and good-looking tools for your specific needs in very little time!</p>
<p><a href="http://jsbin.com/koroyap/5/edit?output">Here is the source</a> for the todo tracking tool</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/netlify-jigsaw</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/netlify-jigsaw" />
    <title>Host Jigsaw static content on Netlify</title>
    <published>2018-02-22T00:00:00+00:00</published>
    <updated>2018-02-22T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">Jigsaw is a very lean static page generator and especially easy to learn for everyone familiar with Laravel and its blade templating language.
netlify is a fantastic host for static pages with a generous free tier and nice tooling.
One of the coolest......</summary>
    <content type="html"><![CDATA[
        <p>Jigsaw is a very lean static page generator and especially easy to learn for everyone familiar with Laravel and its blade templating language.</p>
<p><a href="http://netlify.com">netlify</a> is a fantastic host for static pages with a generous free tier and nice tooling.</p>
<p>One of the coolest features is Continuous Deployment: You create and preview your site locally, commit changes to your Git repo — and Netlify builds static pages using their build image.</p>
<p>Node, Ruby and Python based tools have been well supported for a long time, but PHP just got first class support lately: Netlify’s <a href="https://github.com/brycekahle">Bryce Kahle</a> updated PHP to version 7.2, improved composer support and made sure that essential extensions like mbstring are in the base image.</p>
<p>Thanks to these changes, it is now super easy to have a continuous Jigsaw (PHP) build that reacts to commits to your Github, Gitlab or Bitbucket repos.</p>
<p>Let me walk you through an example site (see: <a href="https://github.com/minthemiddle/jigsaw-netlify-test">minthemiddle/jigsaw-netlify-test</a>):</p>
<h2>Install Jigsaw locally.</h2>
<p>As I have had problems installing Jigsaw globally, I always install it locally</p>
<ul>
<li><code>$mkdir jigsaw-netlify-test</code></li>
<li><code>cd jigsaw-netlify-test</code></li>
<li><code>composer require tightenco/jigsaw</code></li>
<li><code>./vendor/bin/jigsaw init</code></li>
</ul>
<h2>Set up Git</h2>
<ul>
<li>Put your project folder in a git repo via git init</li>
<li>Create a repo in Github/Bitbucket/Gitlab and add remote repo locally</li>
<li>Create your first commit: <code>git commit -am “Initial commit"</code> and push it to Github: <code>git push</code></li>
</ul>
<h2>Set up Netlify page</h2>
<ul>
<li>Log into your Netlify account and create New site from Git</li>
<li>Select the repo that you just generated</li>
</ul>
<h2>Create deployment script</h2>
<p>Netlify needs to know how to build your site. You can tell it by creating a <code>netlify.toml</code> config file:</p>
<pre><code class="language-yaml">[build]
PHP_VERSION=7.2
command = "gulp --production"
publish = "build_production"</code></pre>
<p>This will use PHP7.2, run gulp which will compile assets and build your site using Jigsaw and deploy the static page to the <code>/build_production</code> folder from where Netlify publishes it to the web.</p>
<h2>Deploy</h2>
<p>Try it out:</p>
<ul>
<li>Make some changes in your local Jigsaw page in the <code>/source</code> folder.</li>
<li>Commit your changes</li>
<li>Push them to your Git repo</li>
<li>Select the site in Netlify and head over to <em>Deploys</em> where you can see your site building</li>
<li>The build script will automatically install all composer requirements and build your site</li>
<li>After about 4 minutes the build finishes and your site is live</li>
</ul>
<h2>Speed it up</h2>
<ul>
<li>I found out that yarn takes about 2 minutes to install itself and all dependencies in Netlify’s image</li>
<li>As I often do not need to recompile assets (from Sass or JavaScript bundles), but just change content in my Jigsaw site, I removed the package.json and use jigsaw instead of gulp</li>
<li>This speeds up the whole build process to only 15 secs (down from 4 minutes)</li>
<li>This is how my netlify.toml looks like</li>
</ul>
<pre><code class="language-yaml"># netlify.toml
[build]

PHP_VERSION=7.2

command = "./vendor/bin/jigsaw build production"
publish = "build_production"</code></pre>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/pandoc-invoices</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/pandoc-invoices" />
    <title>Generate PDF invoices from Markdown using Pandoc</title>
    <published>2017-01-09T00:00:00+00:00</published>
    <updated>2017-01-09T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">TL;DR: You can use Pandoc with wkthmltopdf to generate nice-looking PDF invoices from Markdown files.

I love simplicity, structure and I like good design. When it comes to invoices or other formal documents that you need to generate as a freelancer......</summary>
    <content type="html"><![CDATA[
        <p><strong>TL;DR:</strong> You can use <em>Pandoc</em> with <em>wkthmltopdf</em> to generate nice-looking PDF invoices from Markdown files.</p>
<h2>The context</h2>
<p>I love simplicity, structure and I like good design. When it comes to invoices or other formal documents that you need to generate as a freelancer (such as status reports or fact sheets), these things do not get together easily:</p>
<h2>The commercial or complicated way</h2>
<p>Of course, you can fire up <em>InDesign</em> or <em>Apple Pages</em> and fine-tune your documents, but this comes at a price: you have to create every new document individually as templating and mail-merging is very basic in both programs. Also, you are stuck with proprietary file formats that you might not be able to open in the future (and your tax office may not be happy about that). On the other side, you have <em>LaTeX</em> which can output fantastic documents from marked up text but has a steep learning curve and also quite some weight (~ 1GB extra). Also, if you want to use system or OTF fonts, you quickly run into problems. Both <em>InDesign</em> and <em>Pages</em> also struggle with the generation of HTML5.</p>
<h2>The (rather) easy way</h2>
<p><em>Pandoc</em> to the rescue. Pandoc is a handy command-line tool that converts text files between different formats. I use it to convert markdown files with YAML metadata blocks to PDF and HTML5 files. And I can style these documents via CSS3 so I can use all local fonts. To use Avenir Next, which I installed on my machine, I just need <code>font-family: 'Avenir Neue'</code> in my CSS.</p>
<p>So how would I create a nice looking invoice?</p>
<p>Here is the template markdown for a fixed-budget project that I did:</p>
<pre><code>---
papersize: a4
margin-left: 20mm
margin-right: 25mm
margin-top: 10mm
margin-bottom: 20mm
...

![](img/logo.png){ width=13.587mm height=13.559mm}

Martin Betz | Meine Straße 1 | 123456 Berlin

Mein Kunde
Kurfürstenstraße 123
10961 Berlin

Berlin, 07.01.2017

# Rechnung: Neugestaltung Webseite
## Rechnungsnummer: 170101

Guten Tag Herr Kunde,

für Ihren am 01.01.2017 per Mail erteilten Auftrag für die Neugestaltung der Webseite
[test.de](test.de) berechne ich Ihnen entsprechend Abmachung folgenden Pauschalbetrag:

**6.000€**

Entsprechend §19 UStG erhebe ich als Kleinunternehmer keine Umsatzsteuer.
Abgaben zur Künstlersozialkasse fallen nicht an.

Bitte überweisen Sie den Rechnungsbetrag innerhalb von 14 Tagen
auf untenstehendes Konto bei der Rich Bank.

Vielen Dank für die sehr gute Zusammenarbeit!

Mit freundlichen Grüßen,

![](img/unterschrift_ex.png){ width=33.8mm }
(Martin Betz)

MARTIN BETZ | Meine Straße 1 | 123456 Berlin | (0000) 000 00 000 | xxx@martinbetz.eu
Steuer-Nummer: 00/000/00000 | Bankverbindung | IBAN DE00 0000 0000 0000 0000 00 | BIC XXXXXXXXXXX</code></pre>
<p>Note that I entered all my personal, the project and the client data manually, but could have queried them from a database as well. Automation is easy in this workflow.</p>
<p>This is how my output PDF (format: A4, black border for contrast only) looks like:</p>
<p><img src="/assets/img/invoices-markdown-example.png" alt="Invoice Example" /></p>
<p>So how can you make an invoice as pretty or even prettier than this?</p>
<h3>Instructions</h3>
<ol>
<li>Install <em>pandoc</em>. If you are on Mac, get <em>Homebrew</em> and install <em>pandoc</em> via <code>brew install pandoc</code>. Otherwise, head over to <a href="http://pandoc.org/installing.html">Pandoc's website</a> and get a package for your machine.</li>
<li>Install <code>wkhtmltopdf</code> via <code>brew install Caskroom/cask/wkhtmltopdf</code> or via the right package from <a href="http://wkhtmltopdf.org/downloads.html">their website</a>. <em>wkthmltopdf</em> is an invisible (aka headless) browser which saves documents to PDF.</li>
<li>Execute <code>pandoc invoice.m -t html5 d -o invoice.pdf</code> in the terminal to output your first version of the invoice PDF. <code>-t</code> is for 'to' and indicates the format, <code>-o … *.pdf</code> will automatically understand that you want to save it as a PDF</li>
<li>To make the invoice prettier, you can add <code>--css style.css</code> to the <em>pandoc</em> command</li>
</ol>
<p>Here is my final CSS. I will tell you about some problems, solutions and architecture decisions after the code.</p>
<pre><code class="language-css">@charset "utf-8";

body {
font-size: 10.5pt;
font-family: 
    "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",
    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
hyphens: auto;
height: 270mm; /* 297 - 10 (top) - 20 (bottom) */
line-height: 140%;
margin: 0;
padding: 0;
}

code {
font-family: "Source Sans Code", Courier New, Courier, monospace;
margin-left: 1pt;
}

a {
color: black;
margin-left: 1pt;
}

table {
width: 100%;
}

table:nth-of-type(3) {
border: 1px solid black;
padding: 5pt;
}

table:nth-of-type(3) td:nth-of-type(2) {
text-align: center;
}

h1 {
font-size: 13pt;
margin-top: 6pt;
margin-bottom: 0;
}

h2 {
font-size: 10.5pt;
font-weight: normal;
margin-top: 0;
margin-bottom: 20pt;
}

p {
width: 100%;
}

p:first-of-type {
font-size: 9pt;
word-spacing: 1pt;
}

p:nth-of-type(2) {
margin-top: 20mm;
}

p:nth-of-type(3) {
text-align: right;
}

p:nth-last-of-type(3) {
margin-top: 10mm;
}

p:last-of-type {
text-align: justify;
font-size: 9pt;
position: absolute;
bottom: 2mm;
margin-bottom: 0;
padding-bottom: 0;
color: #444;
}

hr {
border: 1px solid #eee;
}

hr:last-of-type {
position: absolute;
bottom: 14mm;
width: 100%;
}

figure {
margin: 0;
}  </code></pre>
<p>And now the making-of:</p>
<ol>
<li>Positioning elements was harder than expected: You set the paper size via the YAML metadata, so I thought I could just derive absolute values from there</li>
<li>I believed that <code>body</code> height should be: <code>297 (A4 height) - 10 (margin-top) - 10 (margin-bottom) = 277mm</code>.</li>
<li>I tried to position a fold line at 99mm (<code>297/3</code>) via <code>.foldline { position: absolute; top:99mm; }</code>, but when I printed it, it showed up at 105mm.</li>
<li>CSS understands <code>mm</code> and <code>pt</code> as values, so I used <code>mm</code> for positioning and <code>pt</code> for font sizes (exactly as in traditional DTP programs)</li>
<li>Footer: I first thought about a <code>Flexbox</code> layout with fixed footer, but quickly settled on a <code>position: absolute;</code> solution as it is enough for my purpose. The calculations, however, were not working as expected so I had to tweak the <code>bottom: xx mm</code> settings by hand</li>
<li>I tried to justify my footer, but… CSS <a href="http://stackoverflow.com/questions/23038457/justify-one-line-of-html-text-to-fill-an-entire-line">cannot justify one-line paragraphs easily</a>. Ouch…</li>
<li>As you cannot set <code>id</code>s or <code>class</code>es in your markdown for the HTML, you end up with a lot of <code>&lt;p&gt;</code>s. I had to make excessive usage of <code>:nth-of-type()</code>, <code>:first-of-type()</code>, <code>:last-of-type()</code> and <code>:nth-last-of-type</code>. It would be nice to have a template for the HTML output (it's possible, more on this later)</li>
<li>My logo is <code>*.svg</code> but that got totally skewed when getting rendered to PDF. I had to generate a high-resolution PNG to get around that.</li>
<li>I made dozens of iterations of the CSS to get the design that I wanted. First I did it the hard way: Change CSS, run Pandoc command, open PDF. Then I found out that <em>PDF Expert</em> re-renders when the PDF has changed. Still, I had to fire Pandoc after each CSS change manually. So I was looking for &quot;live reloading&quot; and ended up with <code>fswatch</code> on Mac (or <code>inotifywait</code> on Linux). I put the actual Pandoc command in a Bash script and started the watcher with <code>fswatch -o . | xargs -n1 ./compile.sh</code>. It worked. The only downside I encountered was that the PDF would reload in <em>PDF Expert</em> every 2 seconds no matter whether there was a change in the CSS not. Flicker, flicker, flicker.</li>
</ol>
<h3>Make it safer</h3>
<p>Now you have a neat invoice PDF from a very simple Markdown file. But: The client could easily edit this PDF, change the cost or copy my signature. You cannot entirely prevent this to happen, but let`s make it a bit more secure.</p>
<ol>
<li>Get the command-line tool <em>pdftk</em> <code>brew install https://raw.githubusercontent.com/turforlag/homebrew-cervezas/master/pdftk.rb </code></li>
<li><code>pdftk invoice.pdf output invoice-protected.pdf allow printing owner_pw "mysecretpassword"</code></li>
</ol>
<p>The client can still print the secured invoice, but not to change it. Funnily, <a href="https://pdfexpert.com/de">PDF Expert</a> is ignoring these settings and still able to edit the file. I have no idea why.</p>
<h3>Next steps</h3>
<p>The invoice PDF is nice, but of course, we can make it even better. Here are some ideas:</p>
<ol>
<li>Set a base font size in <code>pt</code> and set the other sizes relative with <code>em</code></li>
<li>Switch the whole styling to <code>Sass</code>, predominantly for nesting the <code>p { %:nth-of-type {} }</code></li>
<li><em>Tables</em> are a big thing in most non-fixed-price invoices. And a big CSS design challenge</li>
<li>Tinkering with <code>p:nth-of-type(10)</code>-ish selectors is not too much fun, so probably using an HTML template with some smarter defaults would be good. I did not have much success with loading a new template from a different <code>--data-dir</code> but <em>brew's</em>, so I copied my template to <code>/usr/local/Cellar/pandoc/1.16.0.2/share/x86_64-osx-ghc-7.10.3/pandoc-1.16.0.2/data/templates/</code></li>
<li>Also, I found <a href="https://www.redminecrm.com/boards/35/topics/1466-custom-template-for-german-invoice">another nice template</a> that I might learn a trick or two from</li>
<li>Finally, for cross-media usage, I might add another stylesheet for the web or maybe media queries (but I have no clue whether that works…)</li>
</ol>
<h3>Resources</h3>
<ul>
<li><a href="brew.sh">Homebrew</a></li>
<li><a href="http://pandoc.org/">Pandoc</a></li>
<li><a href="http://wkhtmltopdf.org/">WKHTMLTOPDF</a></li>
</ul>
<h3>Q&amp;A</h3>
<ul>
<li>Why didn't you use a styled <em>OpenDocument</em> template? I don't like the fact that you <a href="https://ask.libreoffice.org/en/question/19709/how-to-delete-unwanted-styles-and-formatting-options-in-libreoffice/?answer=19720#post-id-19720">cannot delete standard style formats</a>. I like lean templates. Otherwise, excellent choice!</li>
<li>Why not via <em>LaTeX</em>? Fonts, installation overhead {~900 MB), different markup (see above)</li>
</ul>
<p>Do you use Pandoc in varying ways for invoice generation? Or do you have other comments or tips? I am very looking forward to your feedback!</p>    ]]></content>
</entry>
            <entry>
    <id>https://martinbetz.eu/articles/dash-snippets</id>
    <link type="text/html" rel="alternate" href="https://martinbetz.eu/articles/dash-snippets" />
    <title>Use Dash snippets for frequently-used text</title>
    <published>2017-01-06T00:00:00+00:00</published>
    <updated>2017-01-06T00:00:00+00:00</updated>
    <author>
        <name>Martin Betz</name>
    </author>
    <summary type="html">If you are like me, you get a lot of business and personal mail. Often the answer is repeated over and over. When I lived in Istanbul, my friends (and even their friends) asked me for trip advice, other friends want to start learning to code and ask me......</summary>
    <content type="html"><![CDATA[
        <p>If you are like me, you get a lot of business and personal mail. Often the answer is repeated over and over. When I lived in Istanbul, my friends (and even their friends) asked me for trip advice, other friends want to start learning to code and ask me for the best resources.</p>
<h2>TL;DR</h2>
<p>You can use <a href="https://kapeli.com/dash"><em>Dash</em></a> (on OSX) to quickly access and adjust text templates that you often use with <a href="https://kapeli.com/dash_guide#introductionToSnippets"><em>Dash's snippets</em></a>.</p>
<h2>Before: Snippets as text files</h2>
<p>I saved quite a few text snippets as simple <code>*.txt</code> files that I would quickly find via <em>Apple Spotlight</em>'s full-text search capability. So with the request for coding advice as an example, the steps involved where:</p>
<ol>
<li>Receive a mail about <code>coding resources</code></li>
<li>Hit reply</li>
<li>Fire up <em>Spotlight</em> (<code>⌘+Space</code>) with the search query <code>coding resources</code></li>
<li>Open <code>reply_coding_resources.txt</code> with a double-click in <em>TextEdit</em></li>
<li>Copy the content</li>
<li>Paste it in the reply</li>
<li>Browse the snippet and adjust salutation and minor details that differed from the snippet</li>
<li>Hit send</li>
</ol>
<h2>Can I streamline that?</h2>
<p>After repeating these seven steps over and over, my programmer self thought about how to simplify this. I took a look at <a href="https://smilesoftware.com/textexpander">TextExpander</a> – I would not mind paying $3.50 a month for an ever-evolving product, but the problem set for snippets is finite and already well being worked on and <a href="https://www.trankynam.com/atext/">aText</a> – good feature set and price, but I did not like the UI and workflow too much.</p>
<p>When I inserted some HTML snippets, it instantly dawned on me:
I already have a tool for managing snippets – <em><code>Dash</code></em>.</p>
<h2>After: Dash Snippets</h2>
<p>Dash is an offline-first documentation browser for programming languages for Mac OS X. You can download and browse documentations for a large number of languages – and save snippets that you can use in any program. It's about $25 once, but for that price you get an excellent documentation browser and a snippet tool. Dash uses Mac's accessibility tools, so you first need to enable it in your Mac's settings.</p>
<p>You can set triggers that paste the snippets. For your non-programming text snippets, I would advise you to use an indicator not being used in the programming languages you use.</p>
<p>I use <code>§</code> for this. In your snippet you can use <code>__placeholder__</code> for, you guess it, a placeholder that you can fill interactively when you paste the snippet.</p>
<p>So here is the workflow for the same <em>coding advice</em> snippet from earlier. I'm assuming that Dash is set up to run at startup and is now sitting in the background waiting for your command.</p>
<ol>
<li>Receive a mail about <code>coding resources</code></li>
<li>Hit reply</li>
<li>Type <code>§codingresources</code></li>
<li>Change the salutation interactively</li>
<li>Hit send</li>
</ol>
<p>It's not only two steps less than with my previous solution, but also faster and less error prone. At the beginning, I tried to come up with really short indicators, such as <code>§cdrsc</code> but of course, these are hard to memorise. So I would advise you to use full-length descriptions.</p>
<p>You could use this technique not only for quick personal responses about coding resources but also for an easy customer support. It is fast, easy and with no big learning curve.</p>    ]]></content>
</entry>
    </feed>
